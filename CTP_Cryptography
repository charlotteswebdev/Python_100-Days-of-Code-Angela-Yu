# ========================
# Exercise 1: XOR Decryption
# ========================
# Each number is XORed with 0x32 to reveal the original characters.
ords = [81, 64, 75, 66, 70, 93, 73, 72, 1, 92, 109, 2, 84, 109, 66, 75, 70, 90, 2, 92, 79]
flag = "".join(chr(o ^ 0x32) for o in ords)
print("Exercise 1 Flag:", flag)

# ========================
# Exercise 2: ASCII to String
# ========================
ascii_vals = [99, 114, 121, 112, 116, 111, 123, 65, 83, 67, 73, 73, 95, 112, 114, 49, 110, 116, 52, 98, 108, 51, 125]
code = ''.join(chr(val) for val in ascii_vals)
print("Exercise 2 Code:", code)

# ========================
# Exercise 3: Hex to Bytes/String
# ========================
hex_code = '63727970746f7b596f755f77696c6c5f62655f776f726b696e675f776974685f6865785f737472696e67735f615f6c6f747d'
decoded = bytes.fromhex(hex_code)
print("Exercise 3 Decoded:", decoded.decode())

# ========================
# Exercise 4: Hex to Base64
# ========================
import base64
hex_code2 = '72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf'
bytes2 = bytes.fromhex(hex_code2)
b64 = base64.b64encode(bytes2)
print("Exercise 4 Base64:", b64.decode())

# ========================
# Exercise 5: Integer to String (RSA format)
# ========================
from Crypto.Util.number import long_to_bytes
number = 11515195063862318899931685488813747395775516287289682636499965282714637259206269
message = long_to_bytes(number).decode('utf-8')
print("Exercise 5 Decoded Message:", message)

# ========================
# Exercise 6: XOR each char with key
# ========================
input_string = "label"
key = 13
output = ''.join(chr(ord(c) ^ key) for c in input_string)
print("Exercise 6 XOR Result:", output)

# ========================
# Exercise 7: XOR Chaining to Recover Flag
# ========================
def decode_flag():
    key1 = bytes.fromhex("a6c8b6733c9b22de7bc0253266a3867df55acde8635e19c73313")
    key2_xor_key1 = bytes.fromhex("37dcb292030faa90d07eec17e3b1c6d8daf94c35d4c9191a5e1e")
    key2_xor_key3 = bytes.fromhex("c1545756687e7573db23aa1c3452a098b71a7fbf0fddddde5fc1")
    flag_xor_all = bytes.fromhex("04ee9855208a2cd59091d04767ae47963170d1660df7f56f5faf")

    # Recover key2 and key3
    key2 = bytes(a ^ b for a, b in zip(key2_xor_key1, key1))
    key3 = bytes(a ^ b for a, b in zip(key2_xor_key3, key2))

    # Recover the flag
    intermediate = bytes(a ^ b for a, b in zip(flag_xor_all, key1))
    intermediate = bytes(a ^ b for a, b in zip(intermediate, key2))
    flag = bytes(a ^ b for a, b in zip(intermediate, key3))

    print("Exercise 7 FLAG:", flag.decode('utf-8', errors='replace'))

decode_flag()

# ========================
# Exercise 8: XOR Encrypted Flag Recovery (Manual Key Discovery)
# ========================
from pwn import xor
cipher_hex = '73626960647f6b206821204f21254f7d694f7624662065622127234f726927756d'
cipher = bytes.fromhex(cipher_hex)

# Key is discovered by comparing first byte with known plaintext 'c'
key = cipher[0] ^ ord('c')
flag = ''.join(chr(b ^ key) for b in cipher)
print("Exercise 8 XOR Flag:", flag)

# ========================
# Exercise 9: XOR with Known Prefix + Manual Key Discovery
# ========================
ciphertext = bytes.fromhex('0e0b213f26041e480b26217f27342e175d0e070a3c5b103e2526217f27342e175d0e077e263451150104')

# First few characters of plaintext are likely 'crypto{'
partial_flag = xor(ciphertext, 'crypto{'.encode())
print("Exercise 9 Partial Flag XOR:", partial_flag)

# Once key is guessed from above, apply full XOR
final_flag = xor(ciphertext, 'myXORkey'.encode())
print("Exercise 9 Final Flag:", final_flag.decode())
